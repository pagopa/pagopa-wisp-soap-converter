name: Code Review

# Controls when the workflow will run
on:
  pull_request:
    branches:
      - main
    types:
      - opened
      - synchronize
      - reopened
  push:
    branches:
      - main


  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

env:
  PROJECT_KEY: "pagopa_pagopa-wisp-soap-converter"

permissions:
  id-token: write
  contents: read
  deployments: write

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  code-review:
    name: Code Review
    # The type of runner that the job will run on
    runs-on: ubuntu-latest

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      - name: Checkout
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4
      - name: Setup JDK
        uses: actions/setup-java@0ab4596768b603586c0de567f2430c30f5b0d2b0 # v3
        with:
          distribution: temurin
          java-version: 17
          cache: sbt
      - name: Build and Test
        env:
          LIGHTBEND_KEY: ${{ secrets.LIGHTBEND_KEY }}
        run: |
          sbt "project wispsoapconverter" \
          -Dsonar.organization="pagopa" \
          -Dsonar.login=${{ secrets.SONAR_TOKEN }} \
          -Dsonar.host.url="https://sonarcloud.io" \
          -Dsonar.projectKey=${{ env.PROJECT_KEY }} \
          -Dsonar.sources=src/main/scala \
          -Dsonar.tests=src/test/scala \
          -Dsonar.junit.reportPaths=target/test-reports \
          -Dsonar.scala.coverage.reportPaths="target/scala-2.13/scoverage-report/scoverage.xml" \
          -Dsonar.pullrequest.key=${{ github.event.pull_request.number }} \
          -Dsonar.pullrequest.branch=${{ github.head_ref }} \
          -Dsonar.pullrequest.base=${{ github.base_ref }} \
          reload clean coverage test coverageReport sonarScan
          

#  smoke-test:
#    name: Smoke Test
#    runs-on: ubuntu-latest
#    environment:
#      name: dev
#    steps:
#      - name: Checkout
#        id: checkout
#        uses: actions/checkout@1f9a0c22da41e6ebfa534300ef656657ea2c6707
#
#      - name: Login
#        id: login
#        # from https://github.com/Azure/login/commits/master
#        uses: azure/login@92a5484dfaf04ca78a94597f4f19fea633851fa2
#        with:
#          client-id: ${{ secrets.CLIENT_ID }}
#          tenant-id: ${{ secrets.TENANT_ID }}
#          subscription-id: ${{ secrets.SUBSCRIPTION_ID }}
#
#      - name: Run Service on Docker
#        shell: bash
#        id: run_service_docker
#        run: |
#          cd ./docker
#          chmod +x ./run_docker.sh
#          ./run_docker.sh local
#
#      - name: Run Integration Tests
#        shell: bash
#        id: run_integration_test
#        run: |
#          export SUBKEY=${{ secrets.SUBKEY }}
#          export CANARY=${{ inputs.canary }}
#          export CUCUMBER_PUBLISH_TOKEN=${{ secrets.CUCUMBER_PUBLISH_TOKEN }}
#
#          cd ./integration-test
#          chmod +x ./run_integration_test.sh
#          ./run_integration_test.sh local
#
#
#  delete_github_deployments:
#    runs-on: ubuntu-latest
#    needs: smoke-test
#    if: ${{ always() }}
#    steps:
#      - name: Delete Previous deployments
#        uses: actions/github-script@v6
#        env:
#          SHA_HEAD: ${{ (github.event_name == 'pull_request' && github.event.pull_request.head.sha) || github.sha}}
#        with:
#          script: |
#            const { SHA_HEAD } = process.env
#
#            const deployments = await github.rest.repos.listDeployments({
#              owner: context.repo.owner,
#              repo: context.repo.repo,
#              sha: SHA_HEAD
#            });
#            await Promise.all(
#              deployments.data.map(async (deployment) => {
#                await github.rest.repos.createDeploymentStatus({
#                  owner: context.repo.owner,
#                  repo: context.repo.repo,
#                  deployment_id: deployment.id,
#                  state: 'inactive'
#                });
#                return github.rest.repos.deleteDeployment({
#                  owner: context.repo.owner,
#                  repo: context.repo.repo,
#                  deployment_id: deployment.id
#                });
#              })
#            );
